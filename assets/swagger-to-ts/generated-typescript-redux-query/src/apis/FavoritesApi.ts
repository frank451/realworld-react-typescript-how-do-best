// tslint:disable
/**
 * Conduit API
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    GenericErrorModel,
    GenericErrorModelFromJSON,
    GenericErrorModelToJSON,
    SingleArticleResponse,
    SingleArticleResponseFromJSON,
    SingleArticleResponseToJSON,
} from '../models';

export interface CreateArticleFavoriteRequest {
    slug: string;
}

export interface DeleteArticleFavoriteRequest {
    slug: string;
}


/**
 * Favorite an article. Auth is required
 * Favorite an article
 */
function createArticleFavoriteRaw<T>(requestParameters: CreateArticleFavoriteRequest, requestConfig: runtime.TypedQueryConfig<T, SingleArticleResponse> = {}): QueryConfig<T> {
    if (requestParameters.slug === null || requestParameters.slug === undefined) {
        throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling createArticleFavorite.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `/articles/{slug}/favorite`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SingleArticleResponseFromJSON(body), text);
    }

    return config;
}

/**
* Favorite an article. Auth is required
* Favorite an article
*/
export function createArticleFavorite<T>(requestParameters: CreateArticleFavoriteRequest, requestConfig?: runtime.TypedQueryConfig<T, SingleArticleResponse>): QueryConfig<T> {
    return createArticleFavoriteRaw(requestParameters, requestConfig);
}

/**
 * Unfavorite an article. Auth is required
 * Unfavorite an article
 */
function deleteArticleFavoriteRaw<T>(requestParameters: DeleteArticleFavoriteRequest, requestConfig: runtime.TypedQueryConfig<T, SingleArticleResponse> = {}): QueryConfig<T> {
    if (requestParameters.slug === null || requestParameters.slug === undefined) {
        throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling deleteArticleFavorite.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `/articles/{slug}/favorite`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SingleArticleResponseFromJSON(body), text);
    }

    return config;
}

/**
* Unfavorite an article. Auth is required
* Unfavorite an article
*/
export function deleteArticleFavorite<T>(requestParameters: DeleteArticleFavoriteRequest, requestConfig?: runtime.TypedQueryConfig<T, SingleArticleResponse>): QueryConfig<T> {
    return deleteArticleFavoriteRaw(requestParameters, requestConfig);
}

