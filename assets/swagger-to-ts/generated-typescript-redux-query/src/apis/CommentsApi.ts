// tslint:disable
/**
 * Conduit API
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    GenericErrorModel,
    GenericErrorModelFromJSON,
    GenericErrorModelToJSON,
    MultipleCommentsResponse,
    MultipleCommentsResponseFromJSON,
    MultipleCommentsResponseToJSON,
    NewCommentRequest,
    NewCommentRequestFromJSON,
    NewCommentRequestToJSON,
    SingleCommentResponse,
    SingleCommentResponseFromJSON,
    SingleCommentResponseToJSON,
} from '../models';

export interface CreateArticleCommentRequest {
    slug: string;
    comment: NewCommentRequest;
}

export interface DeleteArticleCommentRequest {
    slug: string;
    id: number;
}

export interface GetArticleCommentsRequest {
    slug: string;
}


/**
 * Create a comment for an article. Auth is required
 * Create a comment for an article
 */
function createArticleCommentRaw<T>(requestParameters: CreateArticleCommentRequest, requestConfig: runtime.TypedQueryConfig<T, SingleCommentResponse> = {}): QueryConfig<T> {
    if (requestParameters.slug === null || requestParameters.slug === undefined) {
        throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling createArticleComment.');
    }

    if (requestParameters.comment === null || requestParameters.comment === undefined) {
        throw new runtime.RequiredError('comment','Required parameter requestParameters.comment was null or undefined when calling createArticleComment.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `/articles/{slug}/comments`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || NewCommentRequestToJSON(requestParameters.comment),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SingleCommentResponseFromJSON(body), text);
    }

    return config;
}

/**
* Create a comment for an article. Auth is required
* Create a comment for an article
*/
export function createArticleComment<T>(requestParameters: CreateArticleCommentRequest, requestConfig?: runtime.TypedQueryConfig<T, SingleCommentResponse>): QueryConfig<T> {
    return createArticleCommentRaw(requestParameters, requestConfig);
}

/**
 * Delete a comment for an article. Auth is required
 * Delete a comment for an article
 */
function deleteArticleCommentRaw<T>(requestParameters: DeleteArticleCommentRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.slug === null || requestParameters.slug === undefined) {
        throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling deleteArticleComment.');
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteArticleComment.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `/articles/{slug}/comments/{id}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete a comment for an article. Auth is required
* Delete a comment for an article
*/
export function deleteArticleComment<T>(requestParameters: DeleteArticleCommentRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deleteArticleCommentRaw(requestParameters, requestConfig);
}

/**
 * Get the comments for an article. Auth is optional
 * Get comments for an article
 */
function getArticleCommentsRaw<T>(requestParameters: GetArticleCommentsRequest, requestConfig: runtime.TypedQueryConfig<T, MultipleCommentsResponse> = {}): QueryConfig<T> {
    if (requestParameters.slug === null || requestParameters.slug === undefined) {
        throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getArticleComments.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/articles/{slug}/comments`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MultipleCommentsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get the comments for an article. Auth is optional
* Get comments for an article
*/
export function getArticleComments<T>(requestParameters: GetArticleCommentsRequest, requestConfig?: runtime.TypedQueryConfig<T, MultipleCommentsResponse>): QueryConfig<T> {
    return getArticleCommentsRaw(requestParameters, requestConfig);
}

