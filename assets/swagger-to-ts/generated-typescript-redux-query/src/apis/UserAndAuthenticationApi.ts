// tslint:disable
/**
 * Conduit API
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    GenericErrorModel,
    GenericErrorModelFromJSON,
    GenericErrorModelToJSON,
    LoginUserRequest,
    LoginUserRequestFromJSON,
    LoginUserRequestToJSON,
    NewUserRequest,
    NewUserRequestFromJSON,
    NewUserRequestToJSON,
    UpdateUserRequest,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    UserResponse,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models';

export interface CreateUserRequest {
    body: NewUserRequest;
}

export interface LoginRequest {
    body: LoginUserRequest;
}

export interface UpdateCurrentUserRequest {
    body: UpdateUserRequest;
}


/**
 * Register a new user
 * Register a new user
 */
function createUserRaw<T>(requestParameters: CreateUserRequest, requestConfig: runtime.TypedQueryConfig<T, UserResponse> = {}): QueryConfig<T> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createUser.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/users`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || NewUserRequestToJSON(requestParameters.body),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserResponseFromJSON(body), text);
    }

    return config;
}

/**
* Register a new user
* Register a new user
*/
export function createUser<T>(requestParameters: CreateUserRequest, requestConfig?: runtime.TypedQueryConfig<T, UserResponse>): QueryConfig<T> {
    return createUserRaw(requestParameters, requestConfig);
}

/**
 * Gets the currently logged-in user
 * Get current user
 */
function getCurrentUserRaw<T>( requestConfig: runtime.TypedQueryConfig<T, UserResponse> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `/users`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserResponseFromJSON(body), text);
    }

    return config;
}

/**
* Gets the currently logged-in user
* Get current user
*/
export function getCurrentUser<T>( requestConfig?: runtime.TypedQueryConfig<T, UserResponse>): QueryConfig<T> {
    return getCurrentUserRaw( requestConfig);
}

/**
 * Login for existing user
 * Existing user login
 */
function loginRaw<T>(requestParameters: LoginRequest, requestConfig: runtime.TypedQueryConfig<T, UserResponse> = {}): QueryConfig<T> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling login.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/users/login`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || LoginUserRequestToJSON(requestParameters.body),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserResponseFromJSON(body), text);
    }

    return config;
}

/**
* Login for existing user
* Existing user login
*/
export function login<T>(requestParameters: LoginRequest, requestConfig?: runtime.TypedQueryConfig<T, UserResponse>): QueryConfig<T> {
    return loginRaw(requestParameters, requestConfig);
}

/**
 * Updated user information for current user
 * Update current user
 */
function updateCurrentUserRaw<T>(requestParameters: UpdateCurrentUserRequest, requestConfig: runtime.TypedQueryConfig<T, UserResponse> = {}): QueryConfig<T> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateCurrentUser.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `/users`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || UpdateUserRequestToJSON(requestParameters.body),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserResponseFromJSON(body), text);
    }

    return config;
}

/**
* Updated user information for current user
* Update current user
*/
export function updateCurrentUser<T>(requestParameters: UpdateCurrentUserRequest, requestConfig?: runtime.TypedQueryConfig<T, UserResponse>): QueryConfig<T> {
    return updateCurrentUserRaw(requestParameters, requestConfig);
}

