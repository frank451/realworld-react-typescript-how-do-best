// tslint:disable
/**
 * Conduit API
 * Conduit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    body: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Article
     */
    tagList: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Article
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Article
     */
    updatedAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Article
     */
    favorited: boolean;
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    favoritesCount: number;
    /**
     * 
     * @type {Profile}
     * @memberof Article
     */
    author: Profile;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof Comment
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Comment
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    body: string;
    /**
     * 
     * @type {Profile}
     * @memberof Comment
     */
    author: Profile;
}
/**
 * 
 * @export
 * @interface GenericErrorModel
 */
export interface GenericErrorModel {
    /**
     * 
     * @type {GenericErrorModelErrors}
     * @memberof GenericErrorModel
     */
    errors: GenericErrorModelErrors;
}
/**
 * 
 * @export
 * @interface GenericErrorModelErrors
 */
export interface GenericErrorModelErrors {
    /**
     * 
     * @type {Array<string>}
     * @memberof GenericErrorModelErrors
     */
    body: Array<string>;
}
/**
 * 
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
    /**
     * 
     * @type {string}
     * @memberof LoginUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUser
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LoginUserRequest
 */
export interface LoginUserRequest {
    /**
     * 
     * @type {LoginUser}
     * @memberof LoginUserRequest
     */
    user: LoginUser;
}
/**
 * 
 * @export
 * @interface MultipleArticlesResponse
 */
export interface MultipleArticlesResponse {
    /**
     * 
     * @type {Array<Article>}
     * @memberof MultipleArticlesResponse
     */
    articles: Array<Article>;
    /**
     * 
     * @type {number}
     * @memberof MultipleArticlesResponse
     */
    articlesCount: number;
}
/**
 * 
 * @export
 * @interface MultipleCommentsResponse
 */
export interface MultipleCommentsResponse {
    /**
     * 
     * @type {Array<Comment>}
     * @memberof MultipleCommentsResponse
     */
    comments: Array<Comment>;
}
/**
 * 
 * @export
 * @interface NewArticle
 */
export interface NewArticle {
    /**
     * 
     * @type {string}
     * @memberof NewArticle
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NewArticle
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof NewArticle
     */
    body: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewArticle
     */
    tagList?: Array<string>;
}
/**
 * 
 * @export
 * @interface NewArticleRequest
 */
export interface NewArticleRequest {
    /**
     * 
     * @type {NewArticle}
     * @memberof NewArticleRequest
     */
    article: NewArticle;
}
/**
 * 
 * @export
 * @interface NewComment
 */
export interface NewComment {
    /**
     * 
     * @type {string}
     * @memberof NewComment
     */
    body: string;
}
/**
 * 
 * @export
 * @interface NewCommentRequest
 */
export interface NewCommentRequest {
    /**
     * 
     * @type {NewComment}
     * @memberof NewCommentRequest
     */
    comment: NewComment;
}
/**
 * 
 * @export
 * @interface NewUser
 */
export interface NewUser {
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof NewUser
     */
    password: string;
}
/**
 * 
 * @export
 * @interface NewUserRequest
 */
export interface NewUserRequest {
    /**
     * 
     * @type {NewUser}
     * @memberof NewUserRequest
     */
    user: NewUser;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    bio: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    image: string;
    /**
     * 
     * @type {boolean}
     * @memberof Profile
     */
    following: boolean;
}
/**
 * 
 * @export
 * @interface ProfileResponse
 */
export interface ProfileResponse {
    /**
     * 
     * @type {Profile}
     * @memberof ProfileResponse
     */
    profile: Profile;
}
/**
 * 
 * @export
 * @interface SingleArticleResponse
 */
export interface SingleArticleResponse {
    /**
     * 
     * @type {Article}
     * @memberof SingleArticleResponse
     */
    article: Article;
}
/**
 * 
 * @export
 * @interface SingleCommentResponse
 */
export interface SingleCommentResponse {
    /**
     * 
     * @type {Comment}
     * @memberof SingleCommentResponse
     */
    comment: Comment;
}
/**
 * 
 * @export
 * @interface TagsResponse
 */
export interface TagsResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof TagsResponse
     */
    tags: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateArticle
 */
export interface UpdateArticle {
    /**
     * 
     * @type {string}
     * @memberof UpdateArticle
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticle
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticle
     */
    body?: string;
}
/**
 * 
 * @export
 * @interface UpdateArticleRequest
 */
export interface UpdateArticleRequest {
    /**
     * 
     * @type {UpdateArticle}
     * @memberof UpdateArticleRequest
     */
    article: UpdateArticle;
}
/**
 * 
 * @export
 * @interface UpdateUser
 */
export interface UpdateUser {
    /**
     * 
     * @type {string}
     * @memberof UpdateUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUser
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUser
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUser
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUser
     */
    image?: string;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {UpdateUser}
     * @memberof UpdateUserRequest
     */
    user: UpdateUser;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    bio: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    image: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {User}
     * @memberof UserResponse
     */
    user: User;
}

/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an article. Auth is required
         * @summary Create an article
         * @param {NewArticleRequest} article Article to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticle(article: NewArticleRequest, options: any = {}): RequestArgs {
            // verify required parameter 'article' is not null or undefined
            if (article === null || article === undefined) {
                throw new RequiredError('article','Required parameter article was null or undefined when calling createArticle.');
            }
            const localVarPath = `/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof article !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(article !== undefined ? article : {}) : (article || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an article. Auth is required
         * @summary Delete an article
         * @param {string} slug Slug of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling deleteArticle.');
            }
            const localVarPath = `/articles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an article. Auth not required
         * @summary Get an article
         * @param {string} slug Slug of the article to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticle(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getArticle.');
            }
            const localVarPath = `/articles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get most recent articles globally. Use query parameters to filter results. Auth is optional
         * @summary Get recent articles globally
         * @param {string} [tag] Filter by tag
         * @param {string} [author] Filter by author (username)
         * @param {string} [favorited] Filter by favorites of a user (username)
         * @param {number} [limit] Limit number of articles returned (default is 20)
         * @param {number} [offset] Offset/skip number of articles (default is 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (favorited !== undefined) {
                localVarQueryParameter['favorited'] = favorited;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
         * @summary Get recent articles from users you follow
         * @param {number} [limit] Limit number of articles returned (default is 20)
         * @param {number} [offset] Offset/skip number of articles (default is 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesFeed(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/articles/feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an article. Auth is required
         * @summary Update an article
         * @param {string} slug Slug of the article to update
         * @param {UpdateArticleRequest} article Article to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle(slug: string, article: UpdateArticleRequest, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling updateArticle.');
            }
            // verify required parameter 'article' is not null or undefined
            if (article === null || article === undefined) {
                throw new RequiredError('article','Required parameter article was null or undefined when calling updateArticle.');
            }
            const localVarPath = `/articles/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof article !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(article !== undefined ? article : {}) : (article || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create an article. Auth is required
         * @summary Create an article
         * @param {NewArticleRequest} article Article to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticle(article: NewArticleRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleArticleResponse> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).createArticle(article, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an article. Auth is required
         * @summary Delete an article
         * @param {string} slug Slug of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).deleteArticle(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an article. Auth not required
         * @summary Get an article
         * @param {string} slug Slug of the article to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticle(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleArticleResponse> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).getArticle(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get most recent articles globally. Use query parameters to filter results. Auth is optional
         * @summary Get recent articles globally
         * @param {string} [tag] Filter by tag
         * @param {string} [author] Filter by author (username)
         * @param {string} [favorited] Filter by favorites of a user (username)
         * @param {number} [limit] Limit number of articles returned (default is 20)
         * @param {number} [offset] Offset/skip number of articles (default is 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultipleArticlesResponse> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).getArticles(tag, author, favorited, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
         * @summary Get recent articles from users you follow
         * @param {number} [limit] Limit number of articles returned (default is 20)
         * @param {number} [offset] Offset/skip number of articles (default is 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesFeed(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultipleArticlesResponse> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).getArticlesFeed(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an article. Auth is required
         * @summary Update an article
         * @param {string} slug Slug of the article to update
         * @param {UpdateArticleRequest} article Article to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle(slug: string, article: UpdateArticleRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleArticleResponse> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).updateArticle(slug, article, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create an article. Auth is required
         * @summary Create an article
         * @param {NewArticleRequest} article Article to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticle(article: NewArticleRequest, options?: any) {
            return ArticlesApiFp(configuration).createArticle(article, options)(axios, basePath);
        },
        /**
         * Delete an article. Auth is required
         * @summary Delete an article
         * @param {string} slug Slug of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(slug: string, options?: any) {
            return ArticlesApiFp(configuration).deleteArticle(slug, options)(axios, basePath);
        },
        /**
         * Get an article. Auth not required
         * @summary Get an article
         * @param {string} slug Slug of the article to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticle(slug: string, options?: any) {
            return ArticlesApiFp(configuration).getArticle(slug, options)(axios, basePath);
        },
        /**
         * Get most recent articles globally. Use query parameters to filter results. Auth is optional
         * @summary Get recent articles globally
         * @param {string} [tag] Filter by tag
         * @param {string} [author] Filter by author (username)
         * @param {string} [favorited] Filter by favorites of a user (username)
         * @param {number} [limit] Limit number of articles returned (default is 20)
         * @param {number} [offset] Offset/skip number of articles (default is 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any) {
            return ArticlesApiFp(configuration).getArticles(tag, author, favorited, limit, offset, options)(axios, basePath);
        },
        /**
         * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
         * @summary Get recent articles from users you follow
         * @param {number} [limit] Limit number of articles returned (default is 20)
         * @param {number} [offset] Offset/skip number of articles (default is 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticlesFeed(limit?: number, offset?: number, options?: any) {
            return ArticlesApiFp(configuration).getArticlesFeed(limit, offset, options)(axios, basePath);
        },
        /**
         * Update an article. Auth is required
         * @summary Update an article
         * @param {string} slug Slug of the article to update
         * @param {UpdateArticleRequest} article Article to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArticle(slug: string, article: UpdateArticleRequest, options?: any) {
            return ArticlesApiFp(configuration).updateArticle(slug, article, options)(axios, basePath);
        },
    };
};

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
    /**
     * Create an article. Auth is required
     * @summary Create an article
     * @param {NewArticleRequest} article Article to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public createArticle(article: NewArticleRequest, options?: any) {
        return ArticlesApiFp(this.configuration).createArticle(article, options)(this.axios, this.basePath);
    }

    /**
     * Delete an article. Auth is required
     * @summary Delete an article
     * @param {string} slug Slug of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public deleteArticle(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).deleteArticle(slug, options)(this.axios, this.basePath);
    }

    /**
     * Get an article. Auth not required
     * @summary Get an article
     * @param {string} slug Slug of the article to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public getArticle(slug: string, options?: any) {
        return ArticlesApiFp(this.configuration).getArticle(slug, options)(this.axios, this.basePath);
    }

    /**
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @summary Get recent articles globally
     * @param {string} [tag] Filter by tag
     * @param {string} [author] Filter by author (username)
     * @param {string} [favorited] Filter by favorites of a user (username)
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public getArticles(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any) {
        return ArticlesApiFp(this.configuration).getArticles(tag, author, favorited, limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @summary Get recent articles from users you follow
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public getArticlesFeed(limit?: number, offset?: number, options?: any) {
        return ArticlesApiFp(this.configuration).getArticlesFeed(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Update an article. Auth is required
     * @summary Update an article
     * @param {string} slug Slug of the article to update
     * @param {UpdateArticleRequest} article Article to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public updateArticle(slug: string, article: UpdateArticleRequest, options?: any) {
        return ArticlesApiFp(this.configuration).updateArticle(slug, article, options)(this.axios, this.basePath);
    }

}


/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a comment for an article. Auth is required
         * @summary Create a comment for an article
         * @param {string} slug Slug of the article that you want to create a comment for
         * @param {NewCommentRequest} comment Comment you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleComment(slug: string, comment: NewCommentRequest, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling createArticleComment.');
            }
            // verify required parameter 'comment' is not null or undefined
            if (comment === null || comment === undefined) {
                throw new RequiredError('comment','Required parameter comment was null or undefined when calling createArticleComment.');
            }
            const localVarPath = `/articles/{slug}/comments`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof comment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(comment !== undefined ? comment : {}) : (comment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a comment for an article. Auth is required
         * @summary Delete a comment for an article
         * @param {string} slug Slug of the article that you want to delete a comment for
         * @param {number} id ID of the comment you want to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticleComment(slug: string, id: number, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling deleteArticleComment.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteArticleComment.');
            }
            const localVarPath = `/articles/{slug}/comments/{id}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the comments for an article. Auth is optional
         * @summary Get comments for an article
         * @param {string} slug Slug of the article that you want to get comments for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleComments(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling getArticleComments.');
            }
            const localVarPath = `/articles/{slug}/comments`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a comment for an article. Auth is required
         * @summary Create a comment for an article
         * @param {string} slug Slug of the article that you want to create a comment for
         * @param {NewCommentRequest} comment Comment you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleComment(slug: string, comment: NewCommentRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleCommentResponse> {
            const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).createArticleComment(slug, comment, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a comment for an article. Auth is required
         * @summary Delete a comment for an article
         * @param {string} slug Slug of the article that you want to delete a comment for
         * @param {number} id ID of the comment you want to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticleComment(slug: string, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).deleteArticleComment(slug, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the comments for an article. Auth is optional
         * @summary Get comments for an article
         * @param {string} slug Slug of the article that you want to get comments for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleComments(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MultipleCommentsResponse> {
            const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).getArticleComments(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a comment for an article. Auth is required
         * @summary Create a comment for an article
         * @param {string} slug Slug of the article that you want to create a comment for
         * @param {NewCommentRequest} comment Comment you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleComment(slug: string, comment: NewCommentRequest, options?: any) {
            return CommentsApiFp(configuration).createArticleComment(slug, comment, options)(axios, basePath);
        },
        /**
         * Delete a comment for an article. Auth is required
         * @summary Delete a comment for an article
         * @param {string} slug Slug of the article that you want to delete a comment for
         * @param {number} id ID of the comment you want to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticleComment(slug: string, id: number, options?: any) {
            return CommentsApiFp(configuration).deleteArticleComment(slug, id, options)(axios, basePath);
        },
        /**
         * Get the comments for an article. Auth is optional
         * @summary Get comments for an article
         * @param {string} slug Slug of the article that you want to get comments for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleComments(slug: string, options?: any) {
            return CommentsApiFp(configuration).getArticleComments(slug, options)(axios, basePath);
        },
    };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
    /**
     * Create a comment for an article. Auth is required
     * @summary Create a comment for an article
     * @param {string} slug Slug of the article that you want to create a comment for
     * @param {NewCommentRequest} comment Comment you want to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public createArticleComment(slug: string, comment: NewCommentRequest, options?: any) {
        return CommentsApiFp(this.configuration).createArticleComment(slug, comment, options)(this.axios, this.basePath);
    }

    /**
     * Delete a comment for an article. Auth is required
     * @summary Delete a comment for an article
     * @param {string} slug Slug of the article that you want to delete a comment for
     * @param {number} id ID of the comment you want to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public deleteArticleComment(slug: string, id: number, options?: any) {
        return CommentsApiFp(this.configuration).deleteArticleComment(slug, id, options)(this.axios, this.basePath);
    }

    /**
     * Get the comments for an article. Auth is optional
     * @summary Get comments for an article
     * @param {string} slug Slug of the article that you want to get comments for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public getArticleComments(slug: string, options?: any) {
        return CommentsApiFp(this.configuration).getArticleComments(slug, options)(this.axios, this.basePath);
    }

}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get tags. Auth not required
         * @summary Get tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options: any = {}): RequestArgs {
            const localVarPath = `/tags`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get tags. Auth not required
         * @summary Get tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get tags. Auth not required
         * @summary Get tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options?: any) {
            return DefaultApiFp(configuration).tagsGet(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get tags. Auth not required
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsGet(options?: any) {
        return DefaultApiFp(this.configuration).tagsGet(options)(this.axios, this.basePath);
    }

}


/**
 * FavoritesApi - axios parameter creator
 * @export
 */
export const FavoritesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Favorite an article. Auth is required
         * @summary Favorite an article
         * @param {string} slug Slug of the article that you want to favorite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleFavorite(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling createArticleFavorite.');
            }
            const localVarPath = `/articles/{slug}/favorite`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unfavorite an article. Auth is required
         * @summary Unfavorite an article
         * @param {string} slug Slug of the article that you want to unfavorite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticleFavorite(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling deleteArticleFavorite.');
            }
            const localVarPath = `/articles/{slug}/favorite`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FavoritesApi - functional programming interface
 * @export
 */
export const FavoritesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Favorite an article. Auth is required
         * @summary Favorite an article
         * @param {string} slug Slug of the article that you want to favorite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleFavorite(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleArticleResponse> {
            const localVarAxiosArgs = FavoritesApiAxiosParamCreator(configuration).createArticleFavorite(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Unfavorite an article. Auth is required
         * @summary Unfavorite an article
         * @param {string} slug Slug of the article that you want to unfavorite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticleFavorite(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleArticleResponse> {
            const localVarAxiosArgs = FavoritesApiAxiosParamCreator(configuration).deleteArticleFavorite(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FavoritesApi - factory interface
 * @export
 */
export const FavoritesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Favorite an article. Auth is required
         * @summary Favorite an article
         * @param {string} slug Slug of the article that you want to favorite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticleFavorite(slug: string, options?: any) {
            return FavoritesApiFp(configuration).createArticleFavorite(slug, options)(axios, basePath);
        },
        /**
         * Unfavorite an article. Auth is required
         * @summary Unfavorite an article
         * @param {string} slug Slug of the article that you want to unfavorite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticleFavorite(slug: string, options?: any) {
            return FavoritesApiFp(configuration).deleteArticleFavorite(slug, options)(axios, basePath);
        },
    };
};

/**
 * FavoritesApi - object-oriented interface
 * @export
 * @class FavoritesApi
 * @extends {BaseAPI}
 */
export class FavoritesApi extends BaseAPI {
    /**
     * Favorite an article. Auth is required
     * @summary Favorite an article
     * @param {string} slug Slug of the article that you want to favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public createArticleFavorite(slug: string, options?: any) {
        return FavoritesApiFp(this.configuration).createArticleFavorite(slug, options)(this.axios, this.basePath);
    }

    /**
     * Unfavorite an article. Auth is required
     * @summary Unfavorite an article
     * @param {string} slug Slug of the article that you want to unfavorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public deleteArticleFavorite(slug: string, options?: any) {
        return FavoritesApiFp(this.configuration).deleteArticleFavorite(slug, options)(this.axios, this.basePath);
    }

}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Follow a user by username
         * @summary Follow a user
         * @param {string} username Username of the profile you want to follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUserByUsername(username: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling followUserByUsername.');
            }
            const localVarPath = `/profiles/{username}/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a profile of a user of the system. Auth is optional
         * @summary Get a profile
         * @param {string} username Username of the profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByUsername(username: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getProfileByUsername.');
            }
            const localVarPath = `/profiles/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unfollow a user by username
         * @summary Unfollow a user
         * @param {string} username Username of the profile you want to unfollow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowUserByUsername(username: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling unfollowUserByUsername.');
            }
            const localVarPath = `/profiles/{username}/follow`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Follow a user by username
         * @summary Follow a user
         * @param {string} username Username of the profile you want to follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUserByUsername(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse> {
            const localVarAxiosArgs = ProfileApiAxiosParamCreator(configuration).followUserByUsername(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a profile of a user of the system. Auth is optional
         * @summary Get a profile
         * @param {string} username Username of the profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByUsername(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse> {
            const localVarAxiosArgs = ProfileApiAxiosParamCreator(configuration).getProfileByUsername(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Unfollow a user by username
         * @summary Unfollow a user
         * @param {string} username Username of the profile you want to unfollow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowUserByUsername(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse> {
            const localVarAxiosArgs = ProfileApiAxiosParamCreator(configuration).unfollowUserByUsername(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Follow a user by username
         * @summary Follow a user
         * @param {string} username Username of the profile you want to follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUserByUsername(username: string, options?: any) {
            return ProfileApiFp(configuration).followUserByUsername(username, options)(axios, basePath);
        },
        /**
         * Get a profile of a user of the system. Auth is optional
         * @summary Get a profile
         * @param {string} username Username of the profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByUsername(username: string, options?: any) {
            return ProfileApiFp(configuration).getProfileByUsername(username, options)(axios, basePath);
        },
        /**
         * Unfollow a user by username
         * @summary Unfollow a user
         * @param {string} username Username of the profile you want to unfollow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowUserByUsername(username: string, options?: any) {
            return ProfileApiFp(configuration).unfollowUserByUsername(username, options)(axios, basePath);
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * Follow a user by username
     * @summary Follow a user
     * @param {string} username Username of the profile you want to follow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public followUserByUsername(username: string, options?: any) {
        return ProfileApiFp(this.configuration).followUserByUsername(username, options)(this.axios, this.basePath);
    }

    /**
     * Get a profile of a user of the system. Auth is optional
     * @summary Get a profile
     * @param {string} username Username of the profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getProfileByUsername(username: string, options?: any) {
        return ProfileApiFp(this.configuration).getProfileByUsername(username, options)(this.axios, this.basePath);
    }

    /**
     * Unfollow a user by username
     * @summary Unfollow a user
     * @param {string} username Username of the profile you want to unfollow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public unfollowUserByUsername(username: string, options?: any) {
        return ProfileApiFp(this.configuration).unfollowUserByUsername(username, options)(this.axios, this.basePath);
    }

}


/**
 * UserAndAuthenticationApi - axios parameter creator
 * @export
 */
export const UserAndAuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register a new user
         * @summary Register a new user
         * @param {NewUserRequest} body Details of the new user to register
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: NewUserRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the currently logged-in user
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login for existing user
         * @summary Existing user login
         * @param {LoginUserRequest} body Credentials to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(body: LoginUserRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling login.');
            }
            const localVarPath = `/users/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updated user information for current user
         * @summary Update current user
         * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(body: UpdateUserRequest, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCurrentUser.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAndAuthenticationApi - functional programming interface
 * @export
 */
export const UserAndAuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Register a new user
         * @summary Register a new user
         * @param {NewUserRequest} body Details of the new user to register
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: NewUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse> {
            const localVarAxiosArgs = UserAndAuthenticationApiAxiosParamCreator(configuration).createUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the currently logged-in user
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse> {
            const localVarAxiosArgs = UserAndAuthenticationApiAxiosParamCreator(configuration).getCurrentUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Login for existing user
         * @summary Existing user login
         * @param {LoginUserRequest} body Credentials to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(body: LoginUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse> {
            const localVarAxiosArgs = UserAndAuthenticationApiAxiosParamCreator(configuration).login(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updated user information for current user
         * @summary Update current user
         * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(body: UpdateUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse> {
            const localVarAxiosArgs = UserAndAuthenticationApiAxiosParamCreator(configuration).updateCurrentUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserAndAuthenticationApi - factory interface
 * @export
 */
export const UserAndAuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Register a new user
         * @summary Register a new user
         * @param {NewUserRequest} body Details of the new user to register
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: NewUserRequest, options?: any) {
            return UserAndAuthenticationApiFp(configuration).createUser(body, options)(axios, basePath);
        },
        /**
         * Gets the currently logged-in user
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any) {
            return UserAndAuthenticationApiFp(configuration).getCurrentUser(options)(axios, basePath);
        },
        /**
         * Login for existing user
         * @summary Existing user login
         * @param {LoginUserRequest} body Credentials to use
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(body: LoginUserRequest, options?: any) {
            return UserAndAuthenticationApiFp(configuration).login(body, options)(axios, basePath);
        },
        /**
         * Updated user information for current user
         * @summary Update current user
         * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(body: UpdateUserRequest, options?: any) {
            return UserAndAuthenticationApiFp(configuration).updateCurrentUser(body, options)(axios, basePath);
        },
    };
};

/**
 * UserAndAuthenticationApi - object-oriented interface
 * @export
 * @class UserAndAuthenticationApi
 * @extends {BaseAPI}
 */
export class UserAndAuthenticationApi extends BaseAPI {
    /**
     * Register a new user
     * @summary Register a new user
     * @param {NewUserRequest} body Details of the new user to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    public createUser(body: NewUserRequest, options?: any) {
        return UserAndAuthenticationApiFp(this.configuration).createUser(body, options)(this.axios, this.basePath);
    }

    /**
     * Gets the currently logged-in user
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    public getCurrentUser(options?: any) {
        return UserAndAuthenticationApiFp(this.configuration).getCurrentUser(options)(this.axios, this.basePath);
    }

    /**
     * Login for existing user
     * @summary Existing user login
     * @param {LoginUserRequest} body Credentials to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    public login(body: LoginUserRequest, options?: any) {
        return UserAndAuthenticationApiFp(this.configuration).login(body, options)(this.axios, this.basePath);
    }

    /**
     * Updated user information for current user
     * @summary Update current user
     * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    public updateCurrentUser(body: UpdateUserRequest, options?: any) {
        return UserAndAuthenticationApiFp(this.configuration).updateCurrentUser(body, options)(this.axios, this.basePath);
    }

}


